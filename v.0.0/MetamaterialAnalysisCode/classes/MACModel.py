"""
FEM model module for the Metamaterial Analysis Code (MAC) package. It represents the whole model.
"""
from datetime import date

from MACMaterial import MACMaterial
from MACProperty import MACProperty
from MACStructure import MACAuxetic
from MACGlobals import MAC_VERSION


class MACModel:
    """
    FEM model class for the Metamaterial Analysis Code (MAC) package. It represents the whole model.

    Attributes:
        ModelDimensions: dimensions of the model
        CellStructure: structure of the cell (BBC, FCC, Auxetic, etc)
        CellSize: size of the cell
        CellMaterial: MACMaterial of the cell
        CellProperty: MACProperty of the cell
    """

    def __init__(self, modeldimensions: tuple[float], cellstructure: object, cellmaterial: list[MACMaterial],
                 cellproperty: list[MACProperty]):
        """
        Constructor for MACModel class
        """
        self.__modeldimensions = modeldimensions
        self.__cellstructure = cellstructure
        self.__cellmaterial = cellmaterial
        self.__cellproperty = cellproperty
        self.__nodedict = {}
        self.__elementdict = {}
        self.__celldict = {}

        if self.__cellstructure == "AUXETIC":

            pass

        else:
            print("Cell structure not recognized. Please choose between: AUXETIC")

    def __center__(self) -> set[tuple[float]]:
        """
        Calculates the center of the cell
        """
        pass

    def write_fem(self, path: str, writeheader: bool = True) -> None:
        """
        Writes the .fem file for the FEM model in the specified path. It appends the data to the file if it already
        exists.
        """

        if path[-4:] != ".fem":
            path += ".fem"

        with open(path, "a") as w:

            if writeheader:

                today = date.today().strftime("%d/%m/%Y")
                analysis_name = path.split("\\")[-1].split(".")[0]
                macverlen = 79 - (len(MAC_VERSION) + len("# MAC version: "))
                analysis_namelen = 79 - (len(analysis_name) + len("# Analysis Name: "))

                header = "#" * 80 + "\n" + \
                         "#" * 13 + "  File generated by Metamaterial Analysis Code (MAC)  " + "#" * 13 + "\n" + \
                         "#" * 80 + "\n" + \
                         "#" + " " * 78 + "#" + "\n" + \
                         "# Escuela Tecnica Superior de Ingenieria Aeronautica" + " " * 27 + "#" + "\n" + \
                         "#" + " " * 78 + "#" + "\n" + \
                         f"# MAC version: {MAC_VERSION}" + " " * macverlen + "#" + "\n" + \
                         "#" + " " * 78 + "#" + "\n" + \
                         f"# Date: {today}" + " " * 61 + "#" "\n" + \
                         "#" + " " * 78 + "#" + "\n" + \
                         f"# Analysis Name: {analysis_name}" + " " * analysis_namelen + "#" + "\n" + \
                         "#" + " " * 78 + "#" + "\n" + \
                         "#" * 80 + "\n"
                w.writelines(header)

                for node in self.__nodedict.values():
                    w.writelines(str(node))

                for element in self.__elementdict.values():
                    w.writelines(str(element))

                for prop in self.__cellproperty:
                    w.writelines(str(prop))

                for material in self.__cellmaterial:
                    w.writelines(str(material))
